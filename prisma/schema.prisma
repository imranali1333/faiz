// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserTeleGram {
  id                  Int           @id @default(autoincrement())
  telegramId          String        @unique @db.VarChar(32)
  firstName           String        @db.VarChar(64)
  lastName            String?       @db.VarChar(64)
  telegramUsername    String?       @db.VarChar(64)
  profilePicture      String?       @db.VarChar(128)
  phoneNumber         String?       @db.VarChar(32)
  authDate            String        @db.VarChar(32)
  languageCode        String?       @db.VarChar(16)
  isBot               Boolean       @default(false)
  status              String?       @db.VarChar(16)
  hash                String?
  lastLogin           DateTime?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  added               DateTime      @default(now())
  allCoins            AllCoins?
  invitationsSent     Invitation[]  @relation("InvitedBy")
  invitationsReceived Invitation[]  @relation("InvitedUser")
  acceptedInvitations Invitation[]  @relation("AcceptedBy")
  eventsAttending     Event[]       @relation("Attendees")
  tasksAssigned       Task[]        @relation("AssignedUsers")
  wallet              Wallet[]
  transactions        Transaction[] @relation("OwningUser")
  fromTransactions    Transaction[] @relation("FromUser")
  toTransactions      Transaction[] @relation("ToUser")
}

model AllCoins {
  id      Int           @id @default(autoincrement())
  userId  Int           @unique
  balance Float         @default(0)
  user    UserTeleGram? @relation(fields: [userId], references: [id])
}

model CoinMangment {
  id      BigInt @id @default(autoincrement())
  userId  BigInt @unique
  balance Float  @default(0)
  user    User?  @relation(fields: [userId], references: [id])
}

model Event {
  id        Int            @id @default(autoincrement())
  name      String
  date      DateTime
  attendees UserTeleGram[] @relation("Attendees")
  tasks     Task[]         @relation("EventTasks")
}

model Task {
  id          Int            @id @default(autoincrement())
  name        String
  description String?
  event       Event          @relation("EventTasks", fields: [eventId], references: [id])
  eventId     Int
  assignedTo  UserTeleGram[] @relation("AssignedUsers")
}

model Invitation {
  id            Int           @id @default(autoincrement())
  invitedById   Int
  invitedUserId Int? // Nullable to allow invitations to non-registered users
  acceptedById  Int? // Nullable to track which user accepted the invitation
  code          String        @unique // Unique code for the invitation
  createdAt     DateTime      @default(now())
  expiresAt     DateTime?     @default(dbgenerated("NOW() + INTERVAL '1 DAY'")) // Automatically set to one day from creation
  invitedBy     UserTeleGram  @relation("InvitedBy", fields: [invitedById], references: [id])
  invitedUser   UserTeleGram? @relation("InvitedUser", fields: [invitedUserId], references: [id])
  acceptedBy    UserTeleGram? @relation("AcceptedBy", fields: [acceptedById], references: [id])

  @@unique([code, acceptedById]) // Ensure that each invitation code can only be accepted once
  @@index([invitedById])
  @@index([code])
  @@index([expiresAt])
}

model UserInvitation {
  id            BigInt    @id @default(autoincrement())
  invitedById   BigInt
  invitedUserId BigInt? // Nullable to allow invitations to non-registered users
  acceptedById  BigInt? // Nullable to track which user accepted the invitation
  code          String    @unique // Unique code for the invitation
  createdAt     DateTime  @default(now())
  expiresAt     DateTime? @default(dbgenerated("NOW() + INTERVAL '1 DAY'")) // Automatically set to one day from creation
  invitedBy     User      @relation("InvitedBy", fields: [invitedById], references: [id])
  invitedUser   User?     @relation("InvitedUser", fields: [invitedUserId], references: [id])
  acceptedBy    User?     @relation("AcceptedBy", fields: [acceptedById], references: [id])

  @@unique([code, acceptedById]) // Ensure that each invitation code can only be accepted once
  @@index([invitedById])
  @@index([code])
  @@index([expiresAt])
}

model Wallet {
  id           Int           @id @default(autoincrement())
  userId       Int           @unique
  walletId     Int           @unique
  balance      Int           @default(0)
  user         UserTeleGram  @relation(fields: [userId], references: [id])
  transactions Transaction[] @relation("WalletTransactions")
}

model Transaction {
  id              Int      @id @default(autoincrement())
  userId          Int
  fromUserId      Int?
  toUserId        Int?
  amount          Int
  transactionType String   @default("transfer")
  createdAt       DateTime @default(now())

  user     UserTeleGram? @relation(fields: [userId], references: [id], name: "OwningUser")
  fromUser UserTeleGram? @relation(fields: [fromUserId], references: [id], name: "FromUser")
  toUser   UserTeleGram? @relation(fields: [toUserId], references: [id], name: "ToUser")
  wallet   Wallet?       @relation(fields: [walletId], references: [id], name: "WalletTransactions")
  walletId Int
}

model Admin {
  id         Int      @id @default(autoincrement())
  removed    Boolean  @default(false)
  enabled    Boolean  @default(true)
  email      String   @unique
  password   String
  name       String
  surname    String
  photo      String?
  createdAt  DateTime @default(now())
  isLoggedIn Boolean?
  posts      Post[]
}

model Post {
  id        Int       @id @default(autoincrement()) // Unique identifier for each post
  createdAt DateTime  @default(now()) // Timestamp for when the post was created
  updatedAt DateTime  @updatedAt // Timestamp for when the post was last updated
  published Boolean   @default(false) // Publication status of the post
  author    Admin     @relation(fields: [authorId], references: [id]) // Relation to the User model
  authorId  Int // Foreign key for the author
  youtube   Streaming @relation(fields: [youId], references: [id]) // Relation to the Streaming model
  youId     Int // Foreign key for the streaming video
}

model Streaming {
  id            Int      @id @default(autoincrement()) // Unique identifier of each video
  title         String // Contains the title of each video
  description   String   @db.Text // Contains the description of each video
  duration      Int // Contains the total video duration of the video
  releaseDate   DateTime @default(now()) // Store the release date of the video
  genre         String // Store the genre of the video
  link          String
  youtubevideos Post[]
  added         DateTime @default(now())
  updated       DateTime @updatedAt
  createdAt     DateTime @default(now())
}

model User {
  id                  BigInt           @id @default(autoincrement())
  telegramId          BigInt           @unique
  isBot               Boolean
  firstName           String
  lastName            String
  username            String?
  languageCode        String
  messagesSent        Message[]        @relation("MessagesFromUser")
  sessions            Session[]        @relation("UserSessions")
  allCoins            CoinMangment?
  invitationsSent     UserInvitation[] @relation("InvitedBy")
  invitationsReceived UserInvitation[] @relation("InvitedUser")
  acceptedInvitations UserInvitation[] @relation("AcceptedBy")
}

model Chat {
  id         BigInt    @id @default(autoincrement())
  telegramId BigInt    @unique
  firstName  String
  lastName   String
  username   String?
  type       String
  messages   Message[] @relation("MessagesInChat")
}

model Message {
  id        BigInt @id @default(autoincrement())
  messageId BigInt @unique
  fromId    BigInt // Use BigInt to match User.telegramId
  chatId    BigInt // Use BigInt to match Chat.telegramId
  from      User   @relation("MessagesFromUser", fields: [fromId], references: [telegramId])
  chat      Chat   @relation("MessagesInChat", fields: [chatId], references: [telegramId])
  date      Int
  text      String
  entities  Json?
}

model Session {
  id        BigInt   @id @default(autoincrement())
  sid       String   @unique
  expiresAt DateTime
  data      Json
  userId    BigInt?
  user      User?    @relation("UserSessions", fields: [userId], references: [id])
}

model CreaterName {
  id        Int    @id @default(autoincrement())
  setName   String
  copyRight String
  Contact   String
}
